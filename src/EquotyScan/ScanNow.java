/*
 * EqotyScan - Free software to scan potential long/short stock
 * 
 * Copyright (C) 2016 Susan Chern <olivegreen48@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package EquotyScan;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;

/**
 *
 * @author schern
 */
public class ScanNow extends javax.swing.JFrame {

    /**
     * Creates new form ScanNow
     * @param rDate
     */
    public ScanNow(String qdate) {                             

        rDate = qdate;
        infoMsg = "Start scanning for " + breakDate(rDate);
        //msgC = new MsgCollector();
        msgC.createFrame();
        msgC.add(infoMsg);
        
        scanDate = rDate;
        title = "Scan result for " + scanDate;
      
 
   //test only
        //patternScan();
        
        //scan and calculate put/call ratio
        infoMsg = "-----working on Put/call ratio-----";
        //msgC.add(infoMsg);
        System.out.println("-----working on Put/call ratio-----");
        PCratio putcall = new PCratio(scanDate);
        hm = putcall.scanRatio();
       
        //sm.dispost();
        
        //get price change, daily vol ratio, and day-to-cover
        System.out.println("-----working on price change etc-----");
        infoMsg = "-----working on price change etco-----";
        msgC.add(infoMsg);
        dailyVRatio dvr = new dailyVRatio(rDate);
        dvr.scanDVR();
        
       //scan news for keywords
        System.out.println("-----working on news-----");
        infoMsg = "-----working on news-----";
        msgC.add(infoMsg);
       NewsFilter nf = new NewsFilter();
       nf.scanNews();
       
        //create table for display
        //System.out.println("start table model...");
   // patternScan();
       
        //prepare list for display
        resultList rlist = new resultList();
        Map<String, resultData> mymap = rlist.getList();
        Set set = mymap.entrySet();
        Iterator itr = set.iterator();
        while(itr.hasNext()){
            Map.Entry me = (Map.Entry)itr.next();
            resultData rd = (resultData)me.getValue();
            scanOutput.add(rd);
        }
        
        //frame.dispose();
        //this.setAlwaysOnTop(true);
        initComponents();
        rTmodel.setDisplayValue(scanOutput);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        save2CSV = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 391, Short.MAX_VALUE)
        );

        save2CSV.setLabel("Save to File");
        save2CSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save2CSVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(480, Short.MAX_VALUE)
                .addComponent(save2CSV)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(save2CSV))
        );

        setTitle(title);
        //setIconImage(getMyIconImage());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new BorderLayout());
        getContentPane().add(jPanel1);

        jTable1 = new JTable();
        jTable1.setModel(rTmodel);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setBorder(BorderFactory.createEmptyBorder());
        jTable1.setColumnSelectionAllowed(true);

        jTable1.getTableHeader().setFont(jTable1.getFont().deriveFont(jTable1.getFont().getStyle() | java.awt.Font.BOLD, jTable1.getFont().getSize()+1));
        jTable1.getTableHeader().setBackground(headerBG);
        jTable1.getTableHeader().setForeground(Color.GRAY);

        //set tooltips
        //jTable1.addMouseListener(new colHeaderToolTips());

        jTable1.addMouseListener(new gotoNews());

        //set hand cursor
        final Cursor handCursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
        final Cursor defaultCursor = Cursor.getDefaultCursor();
        jTable1.addMouseMotionListener(new MouseAdapter()
            {
                public void mouseMoved(MouseEvent e)
                {
                    int cModel = jTable1.columnAtPoint(e.getPoint());
                    int cView = jTable1.convertColumnIndexToView(cModel);
                    jTable1.getTableHeader().setToolTipText(rTmodel.headerToolTips[cView]);
                    if (cView == 5)
                    {
                        jTable1.setCursor(handCursor);
                    }
                    else
                    {
                        jTable1.setCursor(defaultCursor);
                    }
                }
            });

            jTable1.setPreferredScrollableViewportSize(new Dimension(500, 450));
            jScrollPane1 = new JScrollPane();

            jScrollPane1.setViewportView(jTable1);

            jPanel1.add(jScrollPane1, BorderLayout.CENTER);

            this.pack();

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void save2CSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save2CSVActionPerformed
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               String msg;
               Boolean wStatus = new RWCSVFile().saveScanPattern(scanDate);
              
               if(wStatus == true)
                   msg = "Save to CSV file successfully";
               else
                    msg = "Save to CSV file failed";
               
               Util.infoDialog("Save Pattern Scan", msg);
            }
        });
    }//GEN-LAST:event_save2CSVActionPerformed

    
    //return date with dash format from YYYYMMDD
    private String breakDate(String noDash){
        String y = noDash.substring(0, 4);
        String m = noDash.substring(4, 6);
        String d = noDash.substring(6, 8);
        String dashDate = y + "-" + m + "-" + d;
        return dashDate;
    }
    
    private void patternScan()
    {
        SwingUtilities.invokeLater(new Runnable(){
            public void run(){
            
                /*
            //scan and calculate put/call ratio
            infoMsg = "-----working on Put/call ratio-----";
            msgC.add(infoMsg);
            System.out.println("-----working on Put/call ratio-----");
            PCratio putcall = new PCratio(scanDate);
            hm = putcall.scanRatio();

            //sm.dispost();
            //get price change, daily vol ratio, and day-to-cover
            System.out.println("-----working on price change etc-----");
            infoMsg = "-----working on price change etco-----";
            msgC.add(infoMsg);
            dailyVRatio dvr = new dailyVRatio(rDate);
            dvr.scanDVR();

           //scan news for keywords
            System.out.println("-----working on news-----");
            infoMsg = "-----working on news-----";
            msgC.add(infoMsg);
           NewsFilter nf = new NewsFilter();
           nf.scanNews();
*/
            //create table for display
            //System.out.println("start table model...");

            //prepare list for display
            resultList rlist = new resultList();
            Map<String, resultData> mymap = rlist.getList();
            Set set = mymap.entrySet();
            Iterator itr = set.iterator();
            while(itr.hasNext()){
                Map.Entry me = (Map.Entry)itr.next();
                resultData rd = (resultData)me.getValue();
                scanOutput.add(rd);
            }

            //frame.dispose();
            //this.setAlwaysOnTop(true);
            initComponents();
            rTmodel.setDisplayValue(scanOutput);
            }
        });
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScanNow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScanNow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScanNow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScanNow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //todo: later
               // new ScanNow().setVisible(true);
            }
        });
    }

    //scan Put/Call ratio
    /*
    private java.util.List<resultData> PCratio(){
        String[] rToken;
        String coSymbol="";
        int vol=0,ttl_call=0, ttl_put=0, ttl_vol;
        String infoMsg="";
        int count=0;
        title = "Scan result for " + scanDate;
        readCSVFile readFile = new readCSVFile();
        ArrayList<String> CoList = readFile.readCVS();
        Iterator<String> itr = CoList.iterator();
        while(itr.hasNext()){
            int i;
            vol=0; 
            ttl_call=0;
            ttl_put=0;
            ttl_vol=0;

            coSymbol = itr.next();
            
            buildRequest req = new buildRequest();
            String request = req.buildOCC(coSymbol, scanDate);
        
           try {
             URL yah = new URL(request);
            URLConnection yc = yah.openConnection();
            //needed?
            //yc.setRequestProperty("Accept-Charset", "UTF-8");

               BufferedReader in = new BufferedReader( new InputStreamReader(yc.getInputStream(), "UTF-8"));
               String inputLine;
                File tmpFile = new File("tmp.xml");
               FileOutputStream fos = new FileOutputStream(tmpFile);
               Writer out = new OutputStreamWriter(fos, "UTF-8");
               //Writer out = new BufferedWriter(new  OutputStreamWriter(new FileOutputStream(tmp), "UTF-8"));
               while((inputLine = in.readLine()) != null){
                   if(inputLine.startsWith("quantity"))
                       continue;
                   else{          
                    rToken = inputLine.split(",");
                    for(i=0; i<rToken.length; i++){
                        if(i==0){
                            vol = Integer.parseInt(rToken[i]);
                        }else if(i==4 && rToken[i].equals("C")){
                            ttl_call += vol;
                        }else if(i==4 && rToken[i].equals("P")){
                            ttl_put += vol;
                        }
                     }
                   
                   }
               }  
               //System.out.println("totol call = " + ttl_call);
               //System.out.println("totol put = " + ttl_put);
               ttl_vol = ttl_put + ttl_call;
               float ratio = (((float)ttl_put) / ((float)ttl_call)) * 100;
               if(ratio < 20){
                   if((ratio == 0 && ttl_vol < 1000)|| (ttl_vol < 1000)){
                       infoMsg = coSymbol + " ttl volume too low. vol= " + ttl_call + " Ratio= " + ratio;
                        System.out.println(infoMsg);
                        //System.console().writer().println(infoMsg);
                   }else{
                       //System.out.println(coSymbol + " ttl_vol = " + ttl_vol + " ttl_put=" + ttl_put + " ttl_call=" + ttl_call + " ratio="+ ratio);
                    resultData rd = new resultData(coSymbol, 0,0, ratio, 0);
                    scanOutput.add(rd);
                    count++;
                   }

               }
                 
               //yahooFinance rs = new yahooFinance();                
               //rs.XMLToBean(tmpFile);
           }catch(java.io.IOException  e){
               System.out.println("IOExeption msg:" + e.getMessage());
           }catch(Exception e){
               //System.out.println("error on " + coSymbol);
               String expMsg = e.getMessage();
               if(!expMsg.toLowerCase().contains(noRecordMsg))
                    System.out.println(coSymbol + " run into other Exeption msg:" + expMsg);
           }finally{
               //System.out.println("end request");      
           }
        }
        System.out.println("count=" + count);
    }
    */
    /*
    private void tempPane(){
        JLabel msg = new JLabel("Scanning. These may take a while..");
        JOptionPane jop = new JOptionPane("Scanning. These may take a while..");
        jop.setMessage("Scanning. These may take a while..");
        jop.setMessageType(JOptionPane.INFORMATION_MESSAGE);
        JDialog dialog = jop.createDialog(msgFrame, "Scan");
        
        JLabel test = new JLabel("test");
        Box b = Box.createHorizontalBox();
      b.add(test, BorderLayout.CENTER);
        b.add(Box.createHorizontalGlue());
        dialog.add(b);
        dialog.pack();
        
        dialog.setModal(false);//not to block background
        dialog.setVisible(true);
    }
    */
    
    private class colHeaderToolTips extends MouseAdapter{
        
        @Override
        public void mouseMoved(MouseEvent e){
            int rowSelected = jTable1.getSelectedRow();
            
            int colSelected = jTable1.getSelectedColumn();
            System.out.println("mouserow=" + rowSelected);
        }
    }
    
     private class gotoNews extends MouseAdapter {

         String coSymbol=null;
          @Override
        public void mouseMoved(MouseEvent e){
            int rowSelected = jTable1.getSelectedRow();
            
            int colSelected = jTable1.getSelectedColumn();
            System.out.println("in gotoNews mouserow=" + rowSelected);
        }
        
        @Override
        public void mouseClicked(MouseEvent e) {
         
            System.out.println("in gotoNews mouseclicked");
            
            
            int rowSelected = jTable1.getSelectedRow();
            int colSelected = jTable1.getSelectedColumn();
            //String valSelected;
            System.out.println("in gotoNews mouseclicked urlcol, col, row, =" + urlCol+ colSelected+ rowSelected);
            //int modelIndex = jTable1.convertRowIndexToModel(rowSelected);
                if(colSelected == urlCol){
                    resultTableModel ntm = (resultTableModel)jTable1.getModel();
                    Object sym = ntm.getValueAt(rowSelected, 0); //get ticker
                    Object valSelected = ntm.getValueAt(rowSelected, colSelected);
                    
                    if(valSelected == null) System.out.println("slected is null");
                    
                    resultList rlist = new resultList();
                    Map<String, resultData> mymap = rlist.getList();
                    Set set = mymap.entrySet();
                    Iterator itr = set.iterator();
                    while(itr.hasNext()){
                        Map.Entry me = (Map.Entry)itr.next();
                        resultData rd = (resultData)me.getValue();
                        //System.out.println("key = " + me.getKey() + " ratio = " + rd.getRatio());
                        coSymbol = rd.getTicker();
                        
                        if(coSymbol.equals(sym)){
                           // try{
                            URL link = rd.getURL();
                            System.out.println("opening link: " + link.toString());
                            openWebpage(link);
                             //}catch(MalformedURLException malExp){
                        //System.out.println(malExp);
                           // }
                        }
                    }
        
                }
             
            
        }
        
       
       
        
    }
   
     static void openWebpage(URI uri) {
    Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
    if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
        try {
            desktop.browse(uri);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}

public static void openWebpage(URL url) {
    try {
        openWebpage(url.toURI());
    } catch (URISyntaxException e) {
        System.out.println(e);
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTable jTable1;
    private javax.swing.JScrollPane jScrollPane1;
    resultTableModel rTmodel = new resultTableModel();
    private Color headerBG = new Color(204,229,255);
    private javax.swing.JButton save2CSV;
    // End of variables declaration//GEN-END:variables
   
    private String title="";
    private java.util.List <resultData> scanOutput = new ArrayList<resultData>();
    
    Map<String, resultData> hm;
    private String scanDate="";
    private JFrame msgFrame = new JFrame("Date specifed");
    private int urlCol = 5;
    
    
    // logs related
    static MsgCollector msgC = new MsgCollector();
    String infoMsg;
    String rDate;
}
